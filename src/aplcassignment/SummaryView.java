
package aplcassignment;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.IntStream;
import org.jpl7.Query;
import org.jpl7.Term;

public class SummaryView extends javax.swing.JFrame {
    private List<Daerah> daerah;

    public SummaryView(List<Daerah> daerah) {
        this.daerah=daerah;
        initComponents();
    }
    
    public SummaryView() {
        initComponents();
    }
    
    public Object[][] populateData(String[] column,List<Daerah> daerah){
        Object data[][] = new Object[daerah.size()][column.length];
        List<Integer> totalAreaCase = totalCasePerArea(column,daerah);
        IntStream.range(0, daerah.size()).forEach(index->{
            data[index][0] = daerah.get(index).getDaerah();
            data[index][1] = totalAreaCase.get(index)!=null?totalAreaCase.get(index):"0";
        });
        
        return data;
    }
    
    public LinkedHashMap<String,Integer> getSortedData(String plFile, List<Daerah> daerah,String order) {
        //consult pl file
        String s1 = "consult('" + plFile + "')";
        Query q1 = new Query(s1);
        System.out.println(q1.hasSolution() ? "success" : "fail");
        q1.close();
        String s2 = order.equalsIgnoreCase("ascending")
                        ?"quicksortAscending("+totalCasePerArea1(daerah).values()+",L)"
                        :"quicksortDescending("+totalCasePerArea1(daerah).values()+",L)";
        Query q2 = new Query(s2);
        Map<String, Term> sol = q2.oneSolution();
        Term[] sortedAmount =  sol.get("L").listToTermArray();
        
        LinkedHashMap<String,Integer> sorted = new LinkedHashMap<String,Integer>();
        IntStream.range(0, sortedAmount.length).forEach(index->{
            sorted.put(
                    totalCasePerArea1(daerah)
                            .entrySet()
                            .stream()
                            .filter(i-> i.getValue().equals(sortedAmount[index].intValue()))
                            .map(Map.Entry::getKey)
                            .findFirst().get(), 
                    sortedAmount[index].intValue()
            );            
        });
        //System.out.println(sorted);
        return sorted;
    }
    
    
    public Object[][] populateAscendingSortedData(String[] column){
        LinkedHashMap<String,Integer> sortedAscendingTotalCaseArea = getSortedData("quicksort.pl",daerah,"ascending");
        Object data[][] = new Object[sortedAscendingTotalCaseArea.size()][column.length];
        IntStream.range(0, sortedAscendingTotalCaseArea.size()).forEach(index->{
                data[index][0]=sortedAscendingTotalCaseArea.keySet().toArray()[index];
                data[index][1]=sortedAscendingTotalCaseArea.values().toArray()[index];
        });
        
        return data;
    }
    
    public Object[][] populateDescendingSortedData(String[] column){
        //get the sorted array and define the object size
        LinkedHashMap<String,Integer> sortedDescendingTotalCaseArea  = getSortedData("quicksort.pl",daerah,"descending");
        Object data[][] = new Object[sortedDescendingTotalCaseArea .size()][column.length];
        
        //populate the object with array element.
        IntStream.range(0, sortedDescendingTotalCaseArea .size()).forEach(index->{
                data[index][0]=sortedDescendingTotalCaseArea .keySet().toArray()[index];
                data[index][1]=sortedDescendingTotalCaseArea .values().toArray()[index];
        });
        
        return data;
    }
    
    static public TreeMap<String,Integer> totalCasePerArea1(List<Daerah> daerah){
        TreeMap<String,Integer> totalCaseArea= new TreeMap();
        IntStream.range(0, daerah.size()).forEach(index->{
            ArrayList<Integer> cases = new ArrayList<>(daerah.get(index).getDate().values()); 
            totalCaseArea.put(daerah.get(index).getDaerah(),cases.stream().mapToInt(Integer::intValue).reduce(0,(x,y)->x+y));
        });
        //System.out.println(totalCaseArea.values());
        return totalCaseArea;
    }
    
    public List<Integer> totalCasePerArea(String[] column, List<Daerah> daerah){
        List<Integer> i= new ArrayList();
        for(Daerah d: daerah){
            ArrayList<Integer> cases = new ArrayList<>(d.getDate().values()); 
            i.add(cases.stream().mapToInt(Integer::intValue).reduce(0,(x,y)->x+y));
        }
        return i;
    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        btnExit1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        btnSortAscending = new javax.swing.JButton();
        btnSortDescending = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblData.setBackground(new java.awt.Color(255, 255, 204));
        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblData);

        btnExit1.setBackground(new java.awt.Color(38, 50, 56));
        btnExit1.setForeground(new java.awt.Color(228, 234, 236));
        btnExit1.setText("Exit");
        btnExit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExit1ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(38, 50, 56));

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(228, 234, 236));
        lblTitle.setText("Denggi Statistic");

        btnSortAscending.setBackground(new java.awt.Color(38, 50, 56));
        btnSortAscending.setForeground(new java.awt.Color(228, 234, 236));
        btnSortAscending.setText("Sort Lowest to Highest");
        btnSortAscending.setBorder(null);
        btnSortAscending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortAscendingActionPerformed(evt);
            }
        });

        btnSortDescending.setBackground(new java.awt.Color(38, 50, 56));
        btnSortDescending.setForeground(new java.awt.Color(228, 234, 236));
        btnSortDescending.setText("Sort Highest to Lowest");
        btnSortDescending.setBorder(null);
        btnSortDescending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortDescendingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btnSortAscending, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSortDescending, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addGap(183, 183, 183))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSortDescending, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(btnSortAscending, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(btnExit1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExit1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSortDescendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortDescendingActionPerformed
        // TODO add your handling code here:
        String column[]={"Daerah","Total Cases"};       
        Object[][] data = populateDescendingSortedData(column);
        tblData.setModel(new javax.swing.table.DefaultTableModel(
            data,
            column
        ));
    }//GEN-LAST:event_btnSortDescendingActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        //Criteria 1: Display/print all dengue cases from 2014-2018
        String column[]={"Daerah","Total Cases"};       
        Object[][] data = populateData(column,daerah);
        tblData.setModel(new javax.swing.table.DefaultTableModel(
            data,
            column
        ));
    }//GEN-LAST:event_formWindowOpened

    private void btnExit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExit1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_btnExit1ActionPerformed

    private void btnSortAscendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortAscendingActionPerformed
        // TODO add your handling code here:
        String column[]={"Daerah","Total Cases"};       
        Object[][] data = populateAscendingSortedData(column);
        tblData.setModel(new javax.swing.table.DefaultTableModel(
            data,
            column
        ));
    }//GEN-LAST:event_btnSortAscendingActionPerformed


    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SummaryView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit1;
    private javax.swing.JButton btnSortAscending;
    private javax.swing.JButton btnSortDescending;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblData;
    // End of variables declaration//GEN-END:variables
}